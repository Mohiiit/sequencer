name: Main-CI-Flow

on:
  push:
    branches:
      - main
      - main-v[0-9].**
    tags:
      - v[0-9].**

  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - auto_merge_enabled
      - edited

env:
  CI: 1
  RUSTFLAGS: "-D warnings -C link-arg=-fuse-ld=lld"
  RUSTDOCFLAGS: "-D warnings -C link-arg=-fuse-ld=lld"
  EXTRA_RUST_TOOLCHAINS: nightly-2024-04-29

# On PR events, cancel existing CI runs on this same PR for this workflow.
# Also, create different concurrency groups for different pushed commits, on push events.
concurrency:
  group: >
    ${{ github.workflow }}-
    ${{ github.ref }}-
    ${{ github.event_name == 'pull_request' && 'PR' || github.sha }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:

  changes-filter:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      blockifier: ${{ steps.filter.outputs.blockifier }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            blockifier:
              - '.github/actions/bootstrap/action.yml'
              - '.github/workflows/main.yml'
              - '.github/workflows/upload_artifacts_workflow.yml'
              - 'build_native_in_docker.sh'
              - 'Cargo.lock'
              - 'Cargo.toml'
              - 'crates/blockifier/**'
              - 'crates/blockifier_test_utils/**'
              - 'crates/native_blockifier/**'
              - 'crates/apollo_sierra_multicompile/build.rs'
              - 'scripts/build_native_blockifier.sh'
              - 'scripts/dependencies.sh'
              - 'scripts/install_build_tools.sh'
              - 'scripts/sequencer-ci.Dockerfile'



  code_style:
    runs-on: starkware-ubuntu-24.04-medium
    steps:
      # Environment setup.
      - uses: actions/checkout@v4
        with:
          # Fetch the entire history. Required to checkout the merge target commit, so the diff can
          # be computed.
          fetch-depth: 0


      # Setup pypy and link to the location expected by .cargo/config.toml.
      - uses: actions/setup-python@v5
        id: setup-pypy
        with:
          python-version: "pypy3.9"
          cache: 'pip'
      - run: ln -s '${{ steps.setup-pypy.outputs.python-path }}' /usr/local/bin/pypy3.9
      - env:
          LD_LIBRARY_PATH: ${{ steps.setup-pypy.outputs.pythonLocation }}/bin
        run: echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}" >> $GITHUB_ENV
      - run: pip install -r scripts/requirements.txt

      # Install rust components.
      - uses: ./.github/actions/bootstrap
        with:
          extra_rust_toolchains: ${{ env.EXTRA_RUST_TOOLCHAINS }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      # Check Cargo.lock is up to date.
      - name: "Check Cargo.lock"
        run: |
          cargo update -w --locked
          git diff --exit-code Cargo.lock

      # Make sure no submodules are out of date or missing.
      - name: "Check submodules"
        run: git submodule status

      # Run code style on PR.
      - name: "Run TODO style pull request"
        if: github.event_name == 'pull_request'
        run: scripts/named_todos.py --commit_id ${{ github.event.pull_request.base.sha }}
      - name: "Run clippy pull request"
        if: github.event_name == 'pull_request'
        run: scripts/run_tests.py --command clippy --changes_only --commit_id ${{ github.event.pull_request.base.sha }}
      - name: "Run cargo doc pull request"
        if: github.event_name == 'pull_request'
        run: scripts/run_tests.py --command doc --changes_only --commit_id ${{ github.event.pull_request.base.sha }}

      # Run code style on push.
      - name: "Run rustfmt"
        # The nightly here is coupled with the one in install_rust/action.yml.
        # If we move the install here we can use a const.
        run: cargo +"$EXTRA_RUST_TOOLCHAINS" fmt --all -- --check

      - name: "Run clippy on push"
        if: github.event_name == 'push'
        run: scripts/run_tests.py --command clippy
      - name: "Run cargo doc on push"
        if: github.event_name == 'push'
        run: scripts/run_tests.py --command doc

      - name: "Run taplo"
        run: scripts/taplo.sh
      - name: Run Machete (detect unused dependencies)
        run: cargo machete



  run-workspace-tests:
    runs-on: starkware-ubuntu-24.04-medium
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/bootstrap
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - run: cargo test -p workspace_tests

  run-tests:
    runs-on: starkware-ubuntu-24.04-large
    needs: changes-filter
    steps:
      - uses: actions/checkout@v4
        with:
          # Fetch the entire history.
          fetch-depth: 0
      - uses: ./.github/actions/bootstrap
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      # Setup pypy and link to the location expected by .cargo/config.toml.
      - uses: actions/setup-python@v5
        id: setup-pypy
        with:
          python-version: "pypy3.9"
          cache: 'pip'
      - run: ln -s '${{ steps.setup-pypy.outputs.python-path }}' /usr/local/bin/pypy3.9
      - env:
          LD_LIBRARY_PATH: ${{ env.Python3_ROOT_DIR }}/bin
        run: echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}" >> $GITHUB_ENV
      - run: pip install -r scripts/requirements.txt

      # TODO(Gilad): only one test needs this (base_layer_test.rs), once it migrates to
      # anvil, remove.
      - run: npm install -g ganache@7.4.3

      - name: "Run tests pull request"
        if: github.event_name == 'pull_request'
        run: |
          scripts/run_tests.py --command test --changes_only --include_dependencies --commit_id ${{ github.event.pull_request.base.sha }}
        env:
          SEED: 0

      - name: "Run tests on push"
        if: github.event_name == 'push'
        # TODO(AdiY/Dori): Better support for running tests on push.
        run: |
          scripts/run_tests.py --command test
        env:
          SEED: 0
          
      - name: Blockifier build
        if: needs.changes-filter.outputs.blockifier == 'true'
        run: cargo build -p blockifier

      - name: Blockifier - transaction_serde
        if: needs.changes-filter.outputs.blockifier == 'true'
        run: |
          cargo test -p blockifier --features transaction_serde &&
          cargo build -p blockifier --features transaction_serde

      - name: Blockifier - cairo_native
        if: needs.changes-filter.outputs.blockifier == 'true'
        run: |
          cargo test -p blockifier --features cairo_native &&
          cargo build -p blockifier --features cairo_native

      - name: Blockifier - tracing
        if: needs.changes-filter.outputs.blockifier == 'true'
        run: |
          cargo test -p blockifier --features tracing &&
          cargo build -p blockifier --features tracing

  run-integration-tests:
    runs-on: starkware-ubuntu-24.04-large
    steps:
      - uses: actions/checkout@v4
        with:
          # Fetch the entire history.
          fetch-depth: 0
      - uses: ./.github/actions/bootstrap
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      # Setup pypy and link to the location expected by .cargo/config.toml.
      - uses: actions/setup-python@v5
        id: setup-pypy
        with:
          python-version: "pypy3.9"
          cache: 'pip'
      - run: ln -s '${{ steps.setup-pypy.outputs.python-path }}' /usr/local/bin/pypy3.9
      - env:
          LD_LIBRARY_PATH: ${{ env.Python3_ROOT_DIR }}/bin
        run: echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}" >> $GITHUB_ENV
      - run: pip install -r scripts/requirements.txt
      
      # TODO(Gilad): only one test needs this (base_layer_test.rs), once it migrates to
      # anvil, remove.
      - run: npm install -g ganache@7.4.3

      - name: "Run integration tests pull request"
        if: github.event_name == 'pull_request'
        run: |
          scripts/run_tests.py --command integration --changes_only --include_dependencies --commit_id ${{ github.event.pull_request.base.sha }}
        env:
          SEED: 0
